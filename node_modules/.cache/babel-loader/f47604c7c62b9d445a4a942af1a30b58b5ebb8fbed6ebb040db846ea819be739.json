{"ast":null,"code":"import React,{useState}from'react';// Define a type for the props expected by each component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Use the defined types for the function parameters\nconst Drawer=_ref=>{let{open,children}=_ref;return open?/*#__PURE__*/_jsx(\"div\",{className:\"drawer\",children:children}):null;};const DrawerHeader=_ref2=>{let{children}=_ref2;return/*#__PURE__*/_jsx(\"div\",{className:\"drawer-header\",children:children});};const DrawerTitle=_ref3=>{let{children}=_ref3;return/*#__PURE__*/_jsx(\"div\",{className:\"drawer-title\",children:children});};const DrawerClose=_ref4=>{let{onClick}=_ref4;return/*#__PURE__*/_jsx(\"button\",{onClick:onClick,children:\"Close\"});};const DrawerContent=_ref5=>{let{children}=_ref5;return/*#__PURE__*/_jsx(\"div\",{className:\"drawer-content\",children:children});};const DrawerDescription=_ref6=>{let{children}=_ref6;return/*#__PURE__*/_jsx(\"div\",{className:\"drawer-description\",children:children});};const DrawerFooter=_ref7=>{let{children}=_ref7;return/*#__PURE__*/_jsx(\"div\",{className:\"drawer-footer\",children:children});};const DrawerTrigger=_ref8=>{let{onClick,children}=_ref8;return/*#__PURE__*/_jsx(\"button\",{onClick:onClick,children:children});};const Button=_ref9=>{let{onClick,children}=_ref9;return/*#__PURE__*/_jsx(\"button\",{onClick:onClick,children:children});};const Chatbot=()=>{const[isDrawerOpen,setIsDrawerOpen]=useState(true);const[messages,setMessages]=useState([]);const handleSendMessage=async message=>{try{const response=await fetch('/chat/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message})});if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();// Update messages state with user message and bot response\nsetMessages([...messages,{user:message},{bot:data.response}]);}catch(error){console.error('There has been a problem with your fetch operation:',error);}};const handleKeyDown=event=>{if(event.key==='Enter'){const input=event.currentTarget;handleSendMessage(input.value);input.value='';// Clear input after sending\n}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(DrawerTrigger,{onClick:()=>setIsDrawerOpen(true),children:\"Open Chatbot\"}),/*#__PURE__*/_jsxs(Drawer,{open:isDrawerOpen,children:[/*#__PURE__*/_jsxs(DrawerHeader,{children:[/*#__PURE__*/_jsx(DrawerTitle,{children:\"Chatbot\"}),/*#__PURE__*/_jsx(DrawerClose,{onClick:()=>setIsDrawerOpen(false)})]}),/*#__PURE__*/_jsxs(DrawerContent,{children:[/*#__PURE__*/_jsx(DrawerDescription,{children:\"This is your friendly chatbot!\"}),/*#__PURE__*/_jsx(DrawerFooter,{children:messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[msg.user&&/*#__PURE__*/_jsxs(\"div\",{children:[\"User: \",msg.user]}),msg.bot&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Bot: \",msg.bot]})]},index))})]})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",onKeyDown:handleKeyDown}),/*#__PURE__*/_jsx(Button,{onClick:()=>setIsDrawerOpen(true),children:\"Open Chatbot\"})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Drawer","_ref","open","children","className","DrawerHeader","_ref2","DrawerTitle","_ref3","DrawerClose","_ref4","onClick","DrawerContent","_ref5","DrawerDescription","_ref6","DrawerFooter","_ref7","DrawerTrigger","_ref8","Button","_ref9","Chatbot","isDrawerOpen","setIsDrawerOpen","messages","setMessages","handleSendMessage","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","user","bot","error","console","handleKeyDown","event","key","input","currentTarget","value","map","msg","index","type","onKeyDown"],"sources":["/Users/nolanrook/Documents/logopedica-chatbot-frontend/src/components/Chatbot.tsx"],"sourcesContent":["import React, { useState, KeyboardEvent, ReactNode } from 'react';\n\n// Define a type for the props expected by each component\ntype DrawerProps = {\n  open: boolean;\n  children: ReactNode;\n};\n\ntype DrawerHeaderProps = {\n  children: ReactNode;\n};\n\ntype DrawerTitleProps = {\n  children: ReactNode;\n};\n\ntype DrawerCloseProps = {\n  onClick: () => void;\n};\n\ntype DrawerContentProps = {\n  children: ReactNode;\n};\n\ntype DrawerDescriptionProps = {\n  children: ReactNode;\n};\n\ntype DrawerFooterProps = {\n  children: ReactNode;\n};\n\ntype DrawerTriggerProps = {\n  onClick: () => void;\n  children: ReactNode;\n};\n\ntype ButtonProps = {\n  onClick: () => void;\n  children: ReactNode;\n};\n\n// Use the defined types for the function parameters\nconst Drawer = ({ open, children }: DrawerProps) => open ? <div className=\"drawer\">{children}</div> : null;\nconst DrawerHeader = ({ children }: DrawerHeaderProps) => <div className=\"drawer-header\">{children}</div>;\nconst DrawerTitle = ({ children }: DrawerTitleProps) => <div className=\"drawer-title\">{children}</div>;\nconst DrawerClose = ({ onClick }: DrawerCloseProps) => <button onClick={onClick}>Close</button>;\nconst DrawerContent = ({ children }: DrawerContentProps) => <div className=\"drawer-content\">{children}</div>;\nconst DrawerDescription = ({ children }: DrawerDescriptionProps) => <div className=\"drawer-description\">{children}</div>;\nconst DrawerFooter = ({ children }: DrawerFooterProps) => <div className=\"drawer-footer\">{children}</div>;\nconst DrawerTrigger = ({ onClick, children }: DrawerTriggerProps) => <button onClick={onClick}>{children}</button>;\nconst Button = ({ onClick, children }: ButtonProps) => <button onClick={onClick}>{children}</button>;\n\ninterface Message {\n    user?: string;\n    bot?: string;\n}\n\nconst Chatbot = () => {\n    const [isDrawerOpen, setIsDrawerOpen] = useState(true);\n    const [messages, setMessages] = useState<Message[]>([]);\n\n    const handleSendMessage = async (message: string) => {\n        try {\n            const response = await fetch('/chat/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message }),\n            });\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            // Update messages state with user message and bot response\n            setMessages([...messages, { user: message }, { bot: data.response }]);\n        } catch (error) {\n            console.error('There has been a problem with your fetch operation:', error);\n        }\n    };\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            const input = event.currentTarget;\n            handleSendMessage(input.value);\n            input.value = ''; // Clear input after sending\n        }\n    };\n\n    return (\n        <div>\n            <DrawerTrigger onClick={() => setIsDrawerOpen(true)}>Open Chatbot</DrawerTrigger>\n            <Drawer open={isDrawerOpen}>\n                <DrawerHeader>\n                    <DrawerTitle>Chatbot</DrawerTitle>\n                    <DrawerClose onClick={() => setIsDrawerOpen(false)} />\n                </DrawerHeader>\n                <DrawerContent>\n                    <DrawerDescription>This is your friendly chatbot!</DrawerDescription>\n                    <DrawerFooter>\n                        {/* Chat messages */}\n                        {messages.map((msg, index) => (\n                            <div key={index}>\n                                {msg.user && <div>User: {msg.user}</div>}\n                                {msg.bot && <div>Bot: {msg.bot}</div>}\n                            </div>\n                        ))}\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n            <input type=\"text\" onKeyDown={handleKeyDown} />\n            <Button onClick={() => setIsDrawerOpen(true)}>Open Chatbot</Button>\n        </div>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}